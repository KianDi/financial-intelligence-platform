org: kianpersonalprojects
app: budget-tracker
service: budget-tracker

frameworkVersion: '4.17.2'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    TABLE_NAME: Budgets
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:us-east-1:*:table/Budgets
            - arn:aws:dynamodb:us-east-1:*:table/Expenses
            - arn:aws:dynamodb:us-east-1:*:table/Transactions
            - arn:aws:dynamodb:us-east-1:*:table/Users
            - arn:aws:dynamodb:us-east-1:*:table/Transactions/index/*
            - arn:aws:dynamodb:us-east-1:*:table/WebSocketConnections
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource:
            - arn:aws:events:${self:provider.region}:*:event-bus/financial-platform-events
        - Effect: Allow
          Action:
            - execute-api:ManageConnections
          Resource:
            - arn:aws:execute-api:${self:provider.region}:*:*/*/POST/@connections/*
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: 
          Fn::Sub: 'https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}'
        audience:
          - Ref: CognitoUserPoolClient
  
  # WebSocket API Gateway
  websocketsApiName: financial-platform-websocket
  websocketsApiRouteSelectionExpression: $request.body.action

functions:
  createBudget:
    handler: functions/createBudget.handler
    events:
      - httpApi:
          path: /budgets
          method: post
          authorizer:
            name: serviceAuthorizer
  getBudgets:
    handler: functions/getBudgets.handler
    events:
      - httpApi:
          path: /budgets
          method: get
          authorizer:
            name: serviceAuthorizer
  addExpense:
    handler: functions/addExpense.handler
    events:
    - httpApi:
        path: /expenses/{budgetId}/expenses
        method: post
        authorizer:
          name: serviceAuthorizer
  getExpenses:
    handler: functions/getExpenses.handler
    events:
      - httpApi:
          path: /budgets/{budgetId}/expenses
          method: get
          authorizer:
            name: serviceAuthorizer

  # Transaction Management Functions
  createTransaction:
    handler: functions/createTransaction.handler
    events:
      - httpApi:
          path: /transactions
          method: post
          authorizer:
            name: serviceAuthorizer

  getTransactions:
    handler: functions/getTransactions.handler
    events:
      - httpApi:
          path: /transactions
          method: get
          authorizer:
            name: serviceAuthorizer

  updateTransaction:
    handler: functions/updateTransaction.handler
    events:
      - httpApi:
          path: /transactions/{timestamp}
          method: put
          authorizer:
            name: serviceAuthorizer

  deleteTransaction:
    handler: functions/deleteTransaction.handler
    events:
      - httpApi:
          path: /transactions/{timestamp}
          method: delete
          authorizer:
            name: serviceAuthorizer

  # User Management Functions
  createUser:
    handler: functions/createUser.handler
    events:
      - httpApi:
          path: /users
          method: post
          authorizer:
            name: serviceAuthorizer

  getUserProfile:
    handler: functions/getUserProfile.handler
    events:
      - httpApi:
          path: /users/profile
          method: get
          authorizer:
            name: serviceAuthorizer

  updateUser:
    handler: functions/updateUser.handler
    events:
      - httpApi:
          path: /users/profile
          method: put
          authorizer:
            name: serviceAuthorizer

  # Event Consumer Functions
  budgetCalculator:
    handler: functions/budgetCalculator.handler
    events:
      - eventBridge:
          eventBus: financial-platform-events
          pattern:
            source:
              - financial.platform
            detail-type:
              - Transaction Created
              - Transaction Updated
              - Transaction Deleted

  notificationHandler:
    handler: functions/notificationHandler.handler
    events:
      - eventBridge:
          eventBus: financial-platform-events
          pattern:
            source:
              - financial.platform
            detail-type:
              - Budget Threshold Reached

  # Audit Logger Function - Logs all financial activities for compliance
  auditLogger:
    handler: functions/auditLogger.handler
    events:
      - eventBridge:
          eventBus: financial-platform-events
          pattern:
            source:
              - financial.platform
            # Log all events from the financial platform

  # WebSocket Connection Management Functions
  websocketConnect:
    handler: functions/websocketConnect.handler
    events:
      - websocket:
          route: $connect

  websocketDisconnect:
    handler: functions/websocketDisconnect.handler
    events:
      - websocket:
          route: $disconnect

  websocketMessage:
    handler: functions/websocketMessage.handler
    events:
      - websocket:
          route: $default

resources:
  Resources:
    # EventBridge Custom Bus already exists - managed externally
    
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH
        GenerateSecret: false

    BudgetsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Budgets
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: budgetId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: budgetId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    ExpensesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Expenses
        AttributeDefinitions:
          - AttributeName: budgetId
            AttributeType: S
          - AttributeName: expenseId
            AttributeType: S
        KeySchema: 
          - AttributeName: budgetId
            KeyType: HASH
          - AttributeName: expenseId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    TransactionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Transactions
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: category
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: category-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: category
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    WebSocketConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: WebSocketConnections
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool
      Export:
        Name: ${self:service}-UserPoolId

    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
      Export:
        Name: ${self:service}-UserPoolClientId

    WebSocketApiId:
      Value:
        Ref: WebsocketsApi
      Export:
        Name: ${self:service}-WebSocketApiId

    WebSocketApiUrl:
      Value:
        Fn::Sub: 'wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}'
      Export:
        Name: ${self:service}-WebSocketApiUrl